// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/NTHU-LSALAB/NTHU-Distributed-System/modules/comment/dao (interfaces: CommentDAO)

// Package daomock is a generated GoMock package.
package daomock

import (
	context "context"
	reflect "reflect"

	dao "github.com/NTHU-LSALAB/NTHU-Distributed-System/modules/comment/dao"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockCommentDAO is a mock of CommentDAO interface.
type MockCommentDAO struct {
	ctrl     *gomock.Controller
	recorder *MockCommentDAOMockRecorder
}

// MockCommentDAOMockRecorder is the mock recorder for MockCommentDAO.
type MockCommentDAOMockRecorder struct {
	mock *MockCommentDAO
}

// NewMockCommentDAO creates a new mock instance.
func NewMockCommentDAO(ctrl *gomock.Controller) *MockCommentDAO {
	mock := &MockCommentDAO{ctrl: ctrl}
	mock.recorder = &MockCommentDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentDAO) EXPECT() *MockCommentDAOMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCommentDAO) Create(arg0 context.Context, arg1 *dao.Comment) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCommentDAOMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCommentDAO)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockCommentDAO) Delete(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCommentDAOMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCommentDAO)(nil).Delete), arg0, arg1)
}

// DeleteByVideoID mocks base method.
func (m *MockCommentDAO) DeleteByVideoID(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByVideoID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByVideoID indicates an expected call of DeleteByVideoID.
func (mr *MockCommentDAOMockRecorder) DeleteByVideoID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByVideoID", reflect.TypeOf((*MockCommentDAO)(nil).DeleteByVideoID), arg0, arg1)
}

// ListByVideoID mocks base method.
func (m *MockCommentDAO) ListByVideoID(arg0 context.Context, arg1 string, arg2, arg3 int) ([]*dao.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByVideoID", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*dao.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByVideoID indicates an expected call of ListByVideoID.
func (mr *MockCommentDAOMockRecorder) ListByVideoID(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByVideoID", reflect.TypeOf((*MockCommentDAO)(nil).ListByVideoID), arg0, arg1, arg2, arg3)
}

// Update mocks base method.
func (m *MockCommentDAO) Update(arg0 context.Context, arg1 *dao.Comment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockCommentDAOMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCommentDAO)(nil).Update), arg0, arg1)
}
