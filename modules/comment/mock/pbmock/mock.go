// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/NTHU-LSALAB/NTHU-Distributed-System/modules/comment/pb (interfaces: CommentClient)

// Package pbmock is a generated GoMock package.
package pbmock

import (
	context "context"
	reflect "reflect"

	pb "github.com/NTHU-LSALAB/NTHU-Distributed-System/modules/comment/pb"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockCommentClient is a mock of CommentClient interface.
type MockCommentClient struct {
	ctrl     *gomock.Controller
	recorder *MockCommentClientMockRecorder
}

// MockCommentClientMockRecorder is the mock recorder for MockCommentClient.
type MockCommentClientMockRecorder struct {
	mock *MockCommentClient
}

// NewMockCommentClient creates a new mock instance.
func NewMockCommentClient(ctrl *gomock.Controller) *MockCommentClient {
	mock := &MockCommentClient{ctrl: ctrl}
	mock.recorder = &MockCommentClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentClient) EXPECT() *MockCommentClientMockRecorder {
	return m.recorder
}

// CreateComment mocks base method.
func (m *MockCommentClient) CreateComment(arg0 context.Context, arg1 *pb.CreateCommentRequest, arg2 ...grpc.CallOption) (*pb.CreateCommentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateComment", varargs...)
	ret0, _ := ret[0].(*pb.CreateCommentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockCommentClientMockRecorder) CreateComment(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockCommentClient)(nil).CreateComment), varargs...)
}

// DeleteComment mocks base method.
func (m *MockCommentClient) DeleteComment(arg0 context.Context, arg1 *pb.DeleteCommentRequest, arg2 ...grpc.CallOption) (*pb.DeleteCommentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteComment", varargs...)
	ret0, _ := ret[0].(*pb.DeleteCommentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockCommentClientMockRecorder) DeleteComment(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockCommentClient)(nil).DeleteComment), varargs...)
}

// DeleteCommentByVideoID mocks base method.
func (m *MockCommentClient) DeleteCommentByVideoID(arg0 context.Context, arg1 *pb.DeleteCommentByVideoIDRequest, arg2 ...grpc.CallOption) (*pb.DeleteCommentByVideoIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCommentByVideoID", varargs...)
	ret0, _ := ret[0].(*pb.DeleteCommentByVideoIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCommentByVideoID indicates an expected call of DeleteCommentByVideoID.
func (mr *MockCommentClientMockRecorder) DeleteCommentByVideoID(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCommentByVideoID", reflect.TypeOf((*MockCommentClient)(nil).DeleteCommentByVideoID), varargs...)
}

// Healthz mocks base method.
func (m *MockCommentClient) Healthz(arg0 context.Context, arg1 *pb.HealthzRequest, arg2 ...grpc.CallOption) (*pb.HealthzResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Healthz", varargs...)
	ret0, _ := ret[0].(*pb.HealthzResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Healthz indicates an expected call of Healthz.
func (mr *MockCommentClientMockRecorder) Healthz(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Healthz", reflect.TypeOf((*MockCommentClient)(nil).Healthz), varargs...)
}

// ListComment mocks base method.
func (m *MockCommentClient) ListComment(arg0 context.Context, arg1 *pb.ListCommentRequest, arg2 ...grpc.CallOption) (*pb.ListCommentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListComment", varargs...)
	ret0, _ := ret[0].(*pb.ListCommentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComment indicates an expected call of ListComment.
func (mr *MockCommentClientMockRecorder) ListComment(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComment", reflect.TypeOf((*MockCommentClient)(nil).ListComment), varargs...)
}

// UpdateComment mocks base method.
func (m *MockCommentClient) UpdateComment(arg0 context.Context, arg1 *pb.UpdateCommentRequest, arg2 ...grpc.CallOption) (*pb.UpdateCommentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateComment", varargs...)
	ret0, _ := ret[0].(*pb.UpdateCommentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateComment indicates an expected call of UpdateComment.
func (mr *MockCommentClientMockRecorder) UpdateComment(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateComment", reflect.TypeOf((*MockCommentClient)(nil).UpdateComment), varargs...)
}
